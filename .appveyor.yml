image: Visual Studio 2017
environment:
  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\.appveyor\\run_with_env.cmd"
  PYPI_PASSWORD:
    secure: 1HcmDnGDFgDCnljyFUMAkw==

  matrix:

    # Pre-installed Python versions, which Appveyor may upgrade to
    # a later point release.
    # See: https://www.appveyor.com/docs/installed-software#python

    - PYTHON: "C:\\Python35-x64"
      PYTHON_VERSION: "3.5.0"
      PYTHON_ARCH: "64"

    - PYTHON: "C:\\Python36-x64"
      PYTHON_VERSION: "3.6.x" # currently 3.6.5
      PYTHON_ARCH: "64"

    - PYTHON: "C:\\Python37-x64"
      PYTHON_VERSION: "3.7.x" # currently 3.7.1
      PYTHON_ARCH: "64"

    - PYTHON: "C:\\Python38-x64"
      PYTHON_VERSION: "3.8.x"
      PYTHON_ARCH: "64"


install:
  # If there is a newer build queued for the same PR, cancel this one.
  # The AppVeyor 'rollout builds' option is supposed to serve the same
  # purpose but it is problematic because it tends to cancel builds pushed
  # directly to master instead of just PR builds (or the converse).
  # credits: JuliaLang developers.
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
          throw "There are newer queued builds for this pull request, failing early." }
  - ECHO "Filesystem root:"
  - ps: "ls \"C:/\""

  # - ECHO "Installed SDKs:"
  # - ps: "ls \"C:/Program Files/Microsoft SDKs/Windows\""

  # Install Python (from the official .msi of https://python.org) and pip when
  # not already installed.
  - ps: if (-not(Test-Path($env:PYTHON))) { & .appveyor\install.ps1 }

  # Explicitly source the vars (missed cl.exe for Python 2.7 and 3.4)
  - call "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Auxiliary\Build\\vcvars64.bat"

  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"

  # Check that we have the expected version and architecture for Python
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""

  # Upgrade to the latest version of pip to avoid it displaying warnings
  # about it being out of date.
  - "python -m pip install --upgrade pip"

  # Install the build dependencies of the project. If some dependencies contain
  # compiled extensions and are not provided as pre-built wheel packages,
  # pip will build them from source using the MSVC compiler matching the
  # target Python version and architecture
  - "%CMD_IN_ENV% pip install -r requirements-dev.txt"
  - "%CMD_IN_ENV% msbuild core\\vc\\SRWLIB.vcxproj /maxcpucount:%NUMBER_OF_PROCESSORS% -property:Configuration=\"Release\";Platform=\"x64\""

build_script:
  # Build the compiled extension
  - "%CMD_IN_ENV% python setup.py build"

after_test:
  # If tests are successful, create binary packages for the project.
  - "%CMD_IN_ENV% python setup.py bdist_wheel"
  - "%CMD_IN_ENV% pip install dist\*.whl"
  - "%CMD_IN_ENV% pytest -vvvv"
  - ps: "ls dist"

artifacts:
  # Archive the generated packages in the ci.appveyor.com build report.
  - path: dist\*

on_success:
  # Upload the content of dist/*.whl to a public wheelhouse
  - "echo [pypi]                     > %USERPROFILE%\\.pypirc"
  - "echo username: mrakitin        >> %USERPROFILE%\\.pypirc"
  - "echo password: %PYPI_PASSWORD% >> %USERPROFILE%\\.pypirc"
  - if "%APPVEYOR_REPO_TAG%"=="true" ( %CMD_IN_ENV% twine upload dist/* ) else ( echo "Not deploying because not a tagged commit." )
